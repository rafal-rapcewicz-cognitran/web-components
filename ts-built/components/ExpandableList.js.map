{"version":3,"file":"ExpandableList.js","sourceRoot":"","sources":["../../src/components/ExpandableList.ts"],"names":[],"mappings":"AAAA,MAAM,cAAe,SAAQ,gBAAgB;IACzC;QACI,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QACjD,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAA;QAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAC9B;YACI,QAAQ,EAAE,UAAU;YACpB,MAAM,EAAE,MAAM;YACd,UAAU,EAAE,MAAM;YAClB,OAAO,EAAE,CAAC;YACV,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,KAAK;YACX,MAAM,EAAE,SAAS;SACpB,CAAC,CAAA;QACN,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,GAAG,CAAA;QAC9B,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAE,IAAI,CAAC,OAAe,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QACjG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACpC,CAAC;IAID,MAAM,KAAK,kBAAkB;QACzB,OAAO,CAAC,eAAe,CAAC,CAAA;IAC5B,CAAC;IAED,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAA;IAC9E,CAAC;IAED,wBAAwB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ;QAC7C,IAAI,IAAI,KAAK,eAAe;YAAE,IAAI,CAAC,YAAY,EAAE,CAAA;IACrD,CAAC;IAED,iBAAiB,KAAK,IAAI,CAAC,YAAY,EAAE,CAAA,CAAC,CAAC;IAE3C,YAAY;QACR,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAA;QACxD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,SAAS,CACzC;QAAA,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAChC,IAAI,KAAK,KAAK,IAAI,CAAC,SAAS,EAAE;gBACzB,KAAa,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAA;aAC/D;QACL,CAAC,CAAC,CAAA;IACN,CAAC;CACJ;AAED,cAAc,CAAC,MAAM,CAAC,iBAAiB,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA","sourcesContent":["class ExpandableList extends HTMLUListElement {\n    constructor() {\n        super()\n        this.toggleBtn = document.createElement('button')\n        this.style.position = 'relative'\n        Object.assign(this.toggleBtn.style,\n            {\n                position: 'absolute',\n                border: 'none',\n                background: 'none',\n                padding: 0,\n                top: 0,\n                left: '5px',\n                cursor: 'pointer'\n            })\n        this.toggleBtn.innerText = '>'\n        this.toggleBtn.addEventListener('click', () => (this.dataset as any).expanded = !this.isExpanded)\n        this.appendChild(this.toggleBtn)\n    }\n\n    toggleBtn: HTMLButtonElement\n\n    static get observedAttributes() {\n        return ['data-expanded']\n    }\n\n    get isExpanded() {\n        return this.dataset.expanded !== null && this.dataset.expanded !== 'false'\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === 'data-expanded') this.updateStyles()\n    }\n\n    connectedCallback() { this.updateStyles() }\n\n    updateStyles() {\n        const transform = this.isExpanded ? 'rotate(90deg)' : ''\n        this.toggleBtn.style.transform = transform\n        ;[...this.children].forEach(child => {\n            if (child !== this.toggleBtn) {\n                (child as any).style.display = this.isExpanded ? '' : 'none'\n            }\n        })\n    }\n}\n\ncustomElements.define('expandable-list', ExpandableList, { extends: 'ul' })\n"]}