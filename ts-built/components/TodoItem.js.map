{"version":3,"file":"TodoItem.js","sourceRoot":"","sources":["../../src/components/TodoItem.ts"],"names":[],"mappings":"AAEA;;;;;EAKE;AACF,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;AAEnD,QAAQ,CAAC,SAAS,GAAG;;;;;;;;;;;;;;;SAeZ,CAAA;AAET,MAAM,QAAS,SAAQ,WAAW;IAC9B;QACI,KAAK,EAAE,CAAA;QACP;;;;UAIE;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAA;QAClD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;QAC/C,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;IACjD,CAAC;IAID,oEAAoE;IACpE,MAAM,KAAK,kBAAkB;QACzB,OAAO,CAAC,SAAS,CAAC,CAAA;IACtB,CAAC;IAED,wBAAwB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ;QAC7C,IAAI,IAAI,KAAK,SAAS;YAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IACxD,CAAC;IAED,qBAAqB;IACrB,iBAAiB;QACb,+BAA+B;QAC/B,UAAU,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,2BAA2B,EAAE,CAAC,CAAC,CAAA;QAC/F,CAAC,EAAE,IAAI,CAAC,CAAA;IACX,CAAC;IAEF,yBAAyB;IACzB,oBAAoB,KAAK,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA,CAAC,CAAC;IAE1D,aAAa,CAAC,KAAK;QACf,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,CAAA;IAC/D,CAAC;CACJ;AAED,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA","sourcesContent":["// TODO setup webpack to be able using 3th party libraries\nimport { html, css } from 'lit-element'\n/*\n    The superpower ✨ of the <template> element is that it gets pre-parsed by the HTML parser\n    into a reusable content fragment. Then when rendering to the page,\n    it can skip the parsing step of the expensive parse → layout → reflow loop the browser\n    does when JavaScript injects content on the page.\n*/\nconst template = document.createElement('template')\n\ntemplate.innerHTML = `\n<style>\n    label { color: green; display: block; }\n    .description { \n        font-size: .65rem;\n        font-weight: lighter;\n        color: #777;\n     }\n</style>\n<label>\n    <input type=\"checkbox\" />\n    <slot></slot>\n    <span class=\"description\">\n        <slot name=\"description\"></slot>\n    </span>\n</label>`\n\nclass TodoItem extends HTMLElement {\n    constructor() {\n        super()\n        /*\n        Shadow Roots have two modes\n            open: Exposes the customElement.shadowRoot to external JavaScript\n            closed: customElement.shadowRoot returns null to external JavaScript.\n        */\n        const shadow = this.attachShadow({ mode: 'open' })\n        shadow.append(template.content.cloneNode(true))\n        this.checkbox = shadow.querySelector('input')\n    }\n\n    checkbox: HTMLInputElement\n\n    // only then attributeChangedCallback is called for given attributes\n    static get observedAttributes() {\n        return ['checked']\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === 'checked') this.updateChacked(newValue)\n    }\n\n    // after added to DOM\n    connectedCallback() {\n        // testing output communication\n        setTimeout(() => {\n            this.dispatchEvent(new CustomEvent('onItemAdded', { detail: 'output communication test' }))\n        }, 1000)\n     }\n\n    // after removed from DOM\n    disconnectedCallback() { console.log('>>> disconnected') }\n\n    updateChacked(value) {\n        this.checkbox.checked = value !== null && value !== 'false'\n    }\n}\n\ncustomElements.define('todo-item', TodoItem)\n"]}